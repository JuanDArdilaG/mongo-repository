import { IOperable } from "./IOperable";
import { IValidatable } from "./IValidatable";
import { IValueObject } from "./IValueObject";
export interface PIIOptions {
    key: string;
    iv: string;
}
export interface ValueObjectOptions<T extends Object> {
    operable: IOperable<T>;
    validatable: IValidatable<T>;
    pii?: PIIOptions;
}
export declare abstract class ValueObject<T extends Object> implements IValueObject<T> {
    private _options;
    protected _value: T;
    constructor(_options: ValueObjectOptions<T>, _value: T);
    get value(): T;
    set value(value: T);
    equal(other: IValueObject<Object>): boolean;
    isBiggerThan(other: ValueObject<T>): boolean;
    is(o: T): boolean;
    toString(): string;
    validate(val: T): Error | void;
    add(other: ValueObject<T>): ValueObject<T>;
    encrypt(val: T): Promise<string>;
    decrypt(val: string): Promise<T>;
}
