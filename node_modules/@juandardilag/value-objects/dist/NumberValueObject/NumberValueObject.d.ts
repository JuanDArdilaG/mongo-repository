import { BooleanValueObject } from "../BooleanValueObject/BooleanValueObject";
import { ValueObject, ValueObjectOptions } from "../ValueObject/ValueObject";
export declare class NumberValueObject extends ValueObject<number> {
    constructor(_value: number, _options?: Partial<ValueObjectOptions<number>>);
    empty(): NumberValueObject;
    static zero(): NumberValueObject;
    equalsTo(other: NumberValueObject): BooleanValueObject<number>;
    differsFrom(other: NumberValueObject): BooleanValueObject<number>;
    isLessThan(other: NumberValueObject): BooleanValueObject<number>;
    isPositive(): BooleanValueObject<number>;
    isNegative(): BooleanValueObject<number>;
    isZero(): BooleanValueObject<number>;
    isBiggerOrEqualThan(other: NumberValueObject): BooleanValueObject<number>;
    substract(value: NumberValueObject): NumberValueObject;
    times(value: NumberValueObject): NumberValueObject;
    static from(value: NumberValueObject): NumberValueObject;
}
