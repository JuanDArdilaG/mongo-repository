import { ValueObject } from "../ValueObject/ValueObject";
export declare class BooleanValueObject<T extends any> extends ValueObject<boolean> {
    private _eval;
    constructor(value: boolean);
    static from<T extends any>(other: BooleanValueObject<any>): BooleanValueObject<T>;
    static true<T extends any>(): BooleanValueObject<T>;
    static false<T extends any>(): BooleanValueObject<T>;
    or(other: BooleanValueObject<T>): BooleanValueObject<T>;
    and(other: BooleanValueObject<T>): BooleanValueObject<T>;
    not(): BooleanValueObject<T>;
    toString(): string;
    then(fn: () => T): BooleanValueObject<T>;
    else(fn: () => T): BooleanValueObject<T>;
    eval(): T;
}
